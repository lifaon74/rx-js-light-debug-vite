import {
  createHigherOrderVariable, ICreateHigherOrderVariable
} from '../../../../../misc/create-higher-order-variable';
import {
  HTMLElementConstructor,
  IGenericSubscribeFunctionProperty, setComponentMultipleSubscribeFunctionProperties,
  setComponentSubscribeFunctionProperties
} from '../../../../../../../../rx-dom/dist';
import {
  havingMultipleSubscribeFunctionProperties, IHavingMultipleSubscribeFunctionPropertiesReturn
} from '../../../../../misc/having-multiple-subscribe-function-properties';
import { createMatInputFieldValue$ } from '../input-field/mat-field.component';
import { let$$ } from '@lifaon/rx-js-light-shortcuts';
import { IMulticastReplayLastSource, ISource, ISubscribeFunction, single } from '@lifaon/rx-js-light';


export type IMatInputComponentValue = string | number | boolean;

export type IMatInputComponentInputs<GValue extends IMatInputComponentValue> = [
  ['value', GValue],
  ['readonly', boolean],
  ['disabled', boolean],
];

export function createMatInputValue$<GValue extends IMatInputComponentValue>(
  initialValue: GValue,
): ICreateHigherOrderVariable<GValue> {
  return createHigherOrderVariable<GValue>(initialValue);
}

export function createMatInputReadonly$(): ICreateHigherOrderVariable<boolean> {
  return createHigherOrderVariable<boolean>(false);
}

export function createMatInputDisabled$(): ICreateHigherOrderVariable<boolean> {
  return createHigherOrderVariable<boolean>(false);
}



/*-----------------------*/



export abstract class MatInputComponent<GValue> extends HTMLElement {
  value$!: ISubscribeFunction<GValue>;
  value!: GValue;

  readonly$!: ISubscribeFunction<boolean>;
  readonly!: boolean;

  disabled$!: ISubscribeFunction<boolean>;
  disabled!: boolean;

  protected _initialValue: GValue;

  protected constructor(
    initialValue: GValue,
  ) {

    const $value$ = let$$<ISubscribeFunction<GValue>>(single(initialValue))
    const $readonly$ = let$$<ISubscribeFunction<boolean>>(single(false))
    const $disabled$ = let$$<ISubscribeFunction<boolean>>(single(false))

    super();
    this._initialValue = initialValue;

    setComponentSubscribeFunctionProperties(this, 'value', $value$);
    setComponentSubscribeFunctionProperties(this, 'readonly', $readonly$);
    setComponentSubscribeFunctionProperties(this, 'disabled', $disabled$);
  }

  reset(): void {
    this.value = this._initialValue;
  }
}

// export interface IMatInputComponentOptions<GValue> {
//   $value$: ISubscribeFunction<ISubscribeFunction<GValue>>;
// }
//
//
// // export abstract class MatInputComponent<GValue> extends havingMultipleSubscribeFunctionProperties<IMatInputComponentInputs<GValue>, HTMLElementConstructor>(HTMLElement) {
// export abstract class MatInputComponent<GValue> extends havingMultipleSubscribeFunctionProperties<IMatInputComponentInputs<GValue>, HTMLElementConstructor>(HTMLElement) {
//   value$: ISubscribeFunction<GValue>;
//   value: GValue;
//
//   protected constructor(
//     $value$: ISource<ISubscribeFunction<GValue>>,
//   ) {
//     const $readonly$ = let$$<ISubscribeFunction<boolean>>(single(false))
//     const $disabled$ = let$$<ISubscribeFunction<boolean>>(single(false))
//
//     super([
//       ['value', $value$],
//       ['readonly', $readonly$],
//       ['disabled', $disabled$],
//     ]);
//
//     setComponentSubscribeFunctionProperties();
//     setComponentMultipleSubscribeFunctionProperties<this, GProperties>(this, args[0]);
//   }
// }

/*-----------------------*/

// export interface IMatInputFactoryOptions {
//
// }
//
//
// export function matInputFactory<
//   // generics
//   GValue extends IMatInputComponentValue,
//   GBaseClass extends (new(...args: any[]) => any)
//   //
//   >(
//   baseClass: GBaseClass,
// ) {
//   // return class extends baseClass {
//   return class extends havingMultipleSubscribeFunctionProperties<IMatInputComponentInputs<GValue>, HTMLElementConstructor>(baseClass) {
//     constructor(...args: any[]) {
//       // super(...args.slice(1));
//
//       const $value$ = let$$<ISubscribeFunction<string>>(single(''))
//       const $readonly$ = let$$<ISubscribeFunction<boolean>>(single(false))
//       const $disabled$ = let$$<ISubscribeFunction<boolean>>(single(false))
//
//       super([
//         $value$,
//         $readonly$,
//         $disabled$,
//       ], ...args);
//
//       // const [$value$, value$, $value] = createMatInputFieldValue$();
//       // const [$readonly$, readonly$] = createMatInputReadonly$();
//       // const [$disabled$, disabled$] = createMatInputDisabled$();
//       setComponentMultipleSubscribeFunctionProperties<this, IMatInputComponentInputs<GValue>>(this, args[0]);
//     }
//
//      reset(): void {
//
//      }
//   };
// }
