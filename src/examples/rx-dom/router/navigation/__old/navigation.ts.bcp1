import {
  createEventListener,
  createMulticastSource, createNotification, freeze, fromEventTarget, INotification, ISubscribeFunction,
  toTypedEventTarget
} from '@lifaon/rx-js-light';
import { patchObjectMethod } from '@lifaon/rx-dom';
import { getLocation } from './get-location';
import { getHistory } from './get-history';


export interface INavigationState {
  readonly url: URL;
}

export function createNavigationState(
  url: URL,
): INavigationState {
  return freeze({
    url,
  });
}

export function historyStateEquals(
  a: INavigationState,
  b: INavigationState,
): boolean {
  return (a.url.toString() === b.url.toString());
}


/*---*/


export type INavigationEvent =
  'push'
  | 'back'
  | 'forward'
  | 'refresh'
  | 'replace'
  | 'error';

export type INavigationNotification = INotification<INavigationEvent, INavigationState>;

export interface INavigation {
  readonly onChange: ISubscribeFunction<INavigationNotification>;
  readonly getState: (index?: number) => (INavigationState | null);
  readonly navigate: (url: URL | string, replaceState?: boolean) => void;
  readonly back: () => void;
  readonly canBack: () => boolean;
  readonly forward: () => void;
  readonly canForward: () => boolean;
  readonly reset: () => void;
}

export function createNavigation(
  limit: number = Number.POSITIVE_INFINITY,
): INavigation {
  let index: number = -1; // last write index
  const states: INavigationState[] = [];

  const history: History = getHistory();
  const location: Location = getLocation();

  let nativeHistoryLastLength: number = history.length;

  const log = (...args: any[]) => console.log(...args);

  const $onNavigation$ = createMulticastSource<INavigationNotification>();

  const dispatch = (name: INavigationEvent, state: INavigationState): void => {
    $onNavigation$.emit(createNotification<INavigationEvent, INavigationState>(name, state));
  };

  const updateNativeHistoryLastLength = (): void => {
    nativeHistoryLastLength = history.length;
  };

  const onIntegrityError = (
    state: INavigationState,
    message: string = '',
  ): void => {
    console.log(`IntegrityError : ${ message }`);
    dispatch('error', state);
    reset();
  };

  const reset = (): void => {
    states.length = 0;
    index = -1;
  };

  const getState = (_index: number = 0): INavigationState | null => {
    const historyIndex: number = index + _index;
    return (
      (0 <= historyIndex)
      && (historyIndex < states.length)
    )
      ? states[historyIndex]
      : null;
  };

  const onPush = (state: INavigationState): void => {
    log('push');

    // because of a previous back, it's possible we created a new branch, so we remove forwards
    const nextIndex: number = index + 1;
    if (nextIndex !== states.length) {
      states.splice(nextIndex);
    }

    // we push current state into history
    states.push(state);

    // if states' length if greater than limit, remove x first states
    if (states.length > limit) {
      states.splice(0, states.length - limit);
    }

    // historyIndex is updated
    index = states.length - 1;

    // send a 'push' event
    dispatch('push', state);
  };

  const onRefresh = (state: INavigationState): void => {
    log('refresh');
    dispatch('refresh', state);
  };

  const onReplace = (state: INavigationState): void => {
    if (index < 0) {
      onPush(state);
    } else {
      if (history.length !== nativeHistoryLastLength) {
        onIntegrityError(state, 'replace / history length diverge');
      } else {
        if (historyStateEquals(state, states[index])) {
          onRefresh(state);
        } else {
          log('replace');
          states[index] = state;
          dispatch('replace', state);
        }
      }
    }
  };

  const onBack = (state?: INavigationState): void => {
    const previousState: INavigationState | null = getState(-1);
    if (state === void 0) {
      state = previousState as INavigationState;
    }

    if (history.length !== nativeHistoryLastLength) {
      debugger;
      onIntegrityError(state, 'back / history length diverge');
    } else if (previousState === null) {
      onIntegrityError(state, 'back / no previous location');
    } else if (!historyStateEquals(state, previousState)) {
      onIntegrityError(state, 'back / urls diverge');
    } else {
      log('back');
      index = Math.max(index - 1, -1);
      dispatch('back', state);
    }
  };

  const onForward = (state?: INavigationState): void => {
    const nextState: INavigationState | null = getState(1);
    if (state === void 0) {
      state = nextState as INavigationState;
    }

    if (history.length !== nativeHistoryLastLength) {
      onIntegrityError(state, 'forward / history length diverge');
    } else if (nextState === null) {
      onIntegrityError(state, 'forward / no forward location');
    } else if (!historyStateEquals(state, nextState)) {
      onIntegrityError(state, 'forward / urls diverge');
    } else {
      log('forward');
      index = Math.min(index + 1, states.length - 1);
      dispatch('forward', state);
    }
  };


  patchObjectMethod(history, 'pushState', function (
    this: History,
    data: any,
    title: string,
    url?: string | null
  ): void {
    onPush(createNavigationState(new URL(url ?? location.href, location.origin)));
    updateNativeHistoryLastLength();
    return this.pushState(data, title, url);
  });

  patchObjectMethod(history, 'replaceState', function (
    this: History,
    data: any,
    title: string,
    url?: string | null
  ): void {
    onReplace(createNavigationState(new URL(url ?? location.href, location.origin)));
    updateNativeHistoryLastLength();
    return this.replaceState(data, title, url);
  });

  let backDetected: boolean = false;
  patchObjectMethod(history, 'back', function (this: History): void {
    onBack();
    updateNativeHistoryLastLength();
    backDetected = true;
    return this.back();
  });

  patchObjectMethod(history, 'forward', function (this: History): void {
    onForward();
    updateNativeHistoryLastLength();
    return this.forward();
  });

  // createEventListener(window, 'popstate', () => {
  //   console.log('popstate detected');
  //   const currentURL: string = location.href;
  //   const previousState: INavigationState | null = getState(-1);
  //   const nextState: INavigationState | null = getState(1);
  //
  //   if ((previousState !== null) && (previousState.url.href === currentURL)) {
  //     if (!backDetected) {
  //       onBack();
  //     }
  //   } else if ((nextState !== null) && (nextState.url.href === currentURL)) {
  //     onForward();
  //   } else {
  //     console.error(`Unexpected state: nothing intercepted`);
  //   }
  //
  //   backDetected = false;
  //
  //   // let interceptedEvent: string;
  //   // if (interceptedEvents.length === 0) {
  //   //   if (index === -1) { // first call
  //   //     interceptedEvent = 'push';
  //   //   } else {
  //   //     console.error(`Unexpected state: nothing intercepted`);
  //   //     return;
  //   //   }
  //   // } else if(interceptedEvents.length === 1) {
  //   //   interceptedEvent = interceptedEvents.pop();
  //   // } else if ((interceptedEvents[0] === 'back') || (interceptedEvents[0] === 'forward')) {
  //   //   interceptedEvent = interceptedEvents[0];
  //   //   interceptedEvents = [];
  //   // } else {
  //   //   console.error(`Unexpected state: ${interceptedEvents}`);
  //   //   interceptedEvents = [];
  //   //   return;
  //   // }
  //   //
  //   //
  //   // const url: URL = new URL(event.urlAfterRedirects || event.url, window.location.origin);
  //   // const state: NgHistoryState = new NgHistoryState(url, lastActivatedRoute);
  //   //
  //   // switch (interceptedEvent) {
  //   //   case 'push':
  //   //     onPush(state);
  //   //     break;
  //   //   case 'replace':
  //   //     onReplace(state);
  //   //     break;
  //   //   case 'back':
  //   //     onBack(state);
  //   //     break;
  //   //   case 'forward':
  //   //     onForward(state);
  //   //     break;
  //   //   default:
  //   //     throw new TypeError(`Invalid interceptedEvent name ${interceptedEvent}`);
  //   // }
  //   //
  //   // updateNativeHistoryLastLength();
  // });

  const back = (): void => {
    history.back();
  };

  const canBack = (): boolean => {
    return (index > 0);
  };

  const forward = (): void => {
    history.forward();
  };

  const canForward = (): boolean => {
    return ((index + 1) < states.length);
  };

  const navigate = (
    url: URL | string,
    replaceState: boolean = false,
  ): void => {
    if (typeof url === 'string') {
      return navigate(new URL(url, location.origin));
    } else {
      if (url.origin === location.origin) {
        if (replaceState) {
          history.replaceState(null, '', url.href);
        } else {
          history.pushState(null, '', url.href);
        }
      } else {
        const location: Location = getLocation();
        if (replaceState) {
          location.replace(url.href);
        } else {
          location.assign(url.href);
        }
      }
    }
  };

  return {
    onChange: $onNavigation$.subscribe,
    getState,
    navigate,
    back,
    canBack,
    forward,
    canForward,
    reset,
  };
}

export async function debugNavigation() {
  const navigation = createNavigation();

  navigation.onChange((notification: INavigationNotification) => {
    console.log(notification);
  });

  for (let i = 0; i < 5; i++) {
    navigation.navigate('abj' + i);
    await new Promise(_ => setTimeout(_, 500));
  }

  (window as any).navigation = navigation;
}
