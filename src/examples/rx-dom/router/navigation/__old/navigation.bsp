// export class NavigationHistory<T extends NavigationHistoryState> extends Emitter {
//
//   protected _limit: number; // if -1, no limit
//
//   protected _states: T[]; // list of states
//   protected _index: number; // last write index
//
//   protected _nativeHistory: History;
//   protected _nativeHistoryStartLength: number;
//   protected _nativeHistoryLastLength: number;
//
//   protected _interceptors: { [key: string]: PropertyCallInterceptorSubscription<History> };
//
//
//   constructor(limit: number = -1) {
//     super();
//     this._limit = limit;
//     this.reset();
//
//     this._nativeHistory = window.history;
//     this._nativeHistoryStartLength = this._nativeHistory.length;
//     this._nativeHistoryLastLength = this._nativeHistoryStartLength;
//
//     this.setUpInterceptors();
//   }
//
//   get length(): number {
//     return this._states.length;
//   }
//
//   get states(): T[] {
//     return Array.from(this._states);
//   }
//
//
//   /**
//    *  Gets a relative state from history
//    *  @Example
//    *    - get(-1) returns previous page
//    *    - get(1)  returns next page
//    *    - get()   returns current page
//    *              returns null if nothing to return
//    * @param {number} index
//    * @return {ActivatedRouteSnapshot | null}
//    */
//   get(index: number = 0): T | null {
//     const historyIndex: number = this._index + index;
//     return ((0 <= historyIndex) && (historyIndex < this._states.length))
//       ? this._states[historyIndex] : null;
//   }
//
//   /**
//    * Go back in history
//    */
//   back(): void {
//     window.history.back();
//   }
//
//   /**
//    * Checks if back is possible
//    * @return {boolean}
//    */
//   canBack(): boolean {
//     return (this._index > 0);
//   }
//
//   /**
//    * Go forward in history
//    */
//   forward() {
//     window.history.forward();
//   }
//
//   /**
//    * Checks if forward is possible
//    * @return {boolean}
//    */
//   canForward(): boolean {
//     return ((this._index + 1) < this._states.length);
//   }
//
//
//   reset(): void {
//     this._states = [];
//     this._index = -1;
//   }
//
//   destroy(): void {
//     for (const key in this._interceptors) {
//       this._interceptors[key].unsubscribe();
//     }
//   }
//
//
//   toString(join: string = ', '): string {
//     return this._states.map((state: T) => state.toString()).join(join);
//   }
//
//
//   protected setUpInterceptors(): Promise<void> {
//
//     this._interceptors = {
//
//       push: new PropertyCallInterceptorSubscription(this._nativeHistory, 'pushState',
//         (args: any[], target: History, native: any) => {
//           const url: URL = new URL(args[2], window.location.origin);
//           this._onPush(new NavigationHistoryState(url) as any);
//           this._updateNativeHistoryLastLength();
//           return native.apply(target, args);
//         }),
//
//       replace: new PropertyCallInterceptorSubscription(this._nativeHistory, 'replaceState',
//         (args: any[], target: History, native: any) => {
//           const url: URL = new URL(args[2], window.location.origin);
//           this._onReplace(new NavigationHistoryState(url) as any);
//           this._updateNativeHistoryLastLength();
//           return native.apply(target, args);
//         }),
//
//       back: new PropertyCallInterceptorSubscription(this._nativeHistory, 'back',
//         (args: any[], target: History, native: any) => {
//           this._onBack();
//           this._updateNativeHistoryLastLength();
//           return native.apply(target, args);
//         }),
//
//       forward: new PropertyCallInterceptorSubscription(this._nativeHistory, 'forward',
//         (args: any[], target: History, native: any) => {
//           this._onForward();
//           this._updateNativeHistoryLastLength();
//           return native.apply(target, args);
//         }),
//     };
//
//     return Promise.all(
//       Object.values<PropertyCallInterceptorSubscription<History>>(this._interceptors)
//         .map(_ => _.subscribe())
//     ).then(() => {});
//   }
//
//   /**
//    * When a push is detected
//    * @param {T} state
//    * @private
//    */
//   protected _onPush(state: T): void {
//     this._log('push');
//
//     // because of a previous back, it's possible we created a new branch, so we remove forwards
//     const nextIndex: number = this._index + 1;
//     if (nextIndex !== this._states.length) {
//       this._states.splice(nextIndex);
//     }
//
//     // we push current state into history
//     this._states.push(state);
//
//
//     // if states' length if greater than limit, remove x first states
//     if ((this._limit >= 0) && (this._states.length > this._limit)) {
//       this._states.splice(0, this._states.length - this._limit);
//     }
//
//     // historyIndex is updated
//     this._index = this._states.length - 1;
//
//     // send a 'push' event
//     this.trigger('push', state);
//   }
//
//   /**
//    * When a refresh is detected
//    * @param {T} state
//    * @private
//    */
//   protected _onRefresh(state: T): void {
//     this._log('refresh');
//     this.trigger('refresh', state);
//   }
//
//   /**
//    * When a replace is detected
//    * @param {ActivatedRouteSnapshot} state
//    * @private
//    */
//   protected _onReplace(state: T): void {
//     if (this._index < 0) {
//       this._onPush(state);
//     } else {
//       if (this._nativeHistory.length !== this._nativeHistoryLastLength) {
//         this._onIntegrityError(state, 'replace / history length diverge');
//       } else {
//         if (state.equals(this._states[this._index])) {
//           this._onRefresh(state);
//         } else {
//           this._log('replace');
//           this._states[this._index] = state;
//           this.trigger('replace', state);
//         }
//       }
//     }
//   }
//
//   /**
//    * When a back is detected
//    * @param {NavigationHistoryState} state
//    * @private
//    */
//   protected _onBack(state?: T): void {
//     const previousState: T | null = this.get(-1);
//     if (state === void 0) {
//       state = previousState;
//     }
//
//     if (this._nativeHistory.length !== this._nativeHistoryLastLength) {
//       this._onIntegrityError(state, 'back / history length diverge');
//     } else if (previousState === null) {
//       this._onIntegrityError(state, 'back / no previous location');
//     } else if (!state.equals(previousState)) {
//       this._onIntegrityError(state, 'back / urls diverge');
//     } else {
//       this._log('back');
//       this._index = Math.max(this._index - 1, -1);
//       this.trigger('back', state);
//     }
//   }
//
//   /**
//    * When a forward is detected
//    * @param {NavigationHistoryState} state
//    * @private
//    */
//   protected _onForward(state?: T): void {
//     const nextState: T | null = this.get(1);
//     if (state === void 0) {
//       state = nextState;
//     }
//
//     if (this._nativeHistory.length !== this._nativeHistoryLastLength) {
//       this._onIntegrityError(state, 'forward / history length diverge');
//     } else if (nextState === null) {
//       this._onIntegrityError(state, 'forward / no forward location');
//     } else if (!state.equals(nextState)) {
//       this._onIntegrityError(state, 'forward / urls diverge');
//     } else {
//       this._log('forward');
//       this._index = Math.min(this._index + 1, this._states.length - 1);
//       this.trigger('forward', state);
//     }
//   }
//
//
//   protected _log(...args: any[]): void {
//     // console.log.apply(console, args);
//   }
//
//   protected _updateNativeHistoryLastLength(): void {
//     this._nativeHistoryLastLength = this._nativeHistory.length;
//   }
//
//   protected _onIntegrityError(state: T, message: string = ''): void {
//     console.warn(`IntegrityError : ${message}`);
//     // debugger;
//     this.trigger('error', state);
//     this.reset();
//   }
// }

