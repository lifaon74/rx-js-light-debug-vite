import { Path } from '../../router/path/path.class';
import { HTMLElementConstructor, nodeAppendChild, setAttributeValue } from '@lifaon/rx-dom';
import { convertRoutePathToRegExp } from '../../router/route/convert-route-path-to-reg-exp';
import { locateRouterOutletElement, ROUTER_OUTLET_TAG_NAME } from '../../router/rx/rx-router-outlet';
import { nodeRemoveChildren } from '../../../../../../../rx-dom/dist/src/light-dom/node/move/devired/batch/node-remove-children';
import { createNotAValidPathForThisRouteError } from '../errors';

export type IRouterOutletElement = Element;


/* RESOLVE */

export interface IRouteResolveInjectParentComponentFunction {
  (): Promise<IRouterOutletElement>;
}

export interface IRouteUndoFunction {
  (): void;
}

export interface IRouteResolveOptions {
  path: Path;
  params: IRouteParams;
  injectParentComponent: IRouteResolveInjectParentComponentFunction,
}

export interface IRouteParams {
  [key: string]: string;
}

export interface IRouteResolveFunction {
  (options: IRouteResolveOptions): Promise<IRouteUndoFunction>;
}

/* ROUTE RESOLVER */

// export interface IRouteResolver {
//   readonly path: Path;
//   readonly resolve: IRouteResolveFunction;
// }

// CHILDREN
export type IRouteChildren = IRouteResolveFunction[];

export interface ILoadRouteChildrenFunction {
  (): Promise<IRouteChildren>;
}

export type IRouteChildrenOrLoadRouteChildrenFunction =
  IRouteChildren
  | ILoadRouteChildrenFunction
  ;

// COMPONENT
export type IRouteComponent = HTMLElementConstructor;

export interface ILoadRouteComponentFunction {
  (): Promise<IRouteComponent>;
}

export type IRouteComponentOrLoadRouteComponentFunction =
  IRouteComponent
  | ILoadRouteComponentFunction
  ;

// LOCATE ROUTER OUTLET
export interface ILocateRouterOutletFunction {
  (parentElement: Element): Promise<IRouterOutletElement>;
}

export const DEFAULT_LOCATE_ROUTER_OUTLET: ILocateRouterOutletFunction = (parentElement: Element) => {
  return locateRouterOutletElement(ROUTER_OUTLET_TAG_NAME, parentElement, new AbortController().signal); // TODO signal
};


// CAN ACTIVATE
export interface ICanActivateFunction {
  (): Promise<Path | void>;
}

export const DEFAULT_CAN_ACTIVATE_FUNCTION: ICanActivateFunction = () => Promise.resolve();

// OPTIONS
export interface IRouteOptions {
  path: Path;
  children?: IRouteChildrenOrLoadRouteChildrenFunction;
  navigateTo?: Path; // TODO
  canActivate?: ICanActivateFunction;
  component?: IRouteComponentOrLoadRouteComponentFunction;
  locateRouterOutletElement?: ILocateRouterOutletFunction;
}


/* HELPERS */

export function createLoadRouteChildrenFunction(
  children: IRouteChildrenOrLoadRouteChildrenFunction | undefined,
): ILoadRouteChildrenFunction {
  return (children === void 0)
    ? () => Promise.resolve<IRouteChildren>([])
    : (
      (typeof children === 'function')
        ? children
        : () => Promise.resolve<IRouteChildren>(children)
    );
}

export function createLoadRouteComponentFunction(
  component: IRouteComponentOrLoadRouteComponentFunction | undefined,
): ILoadRouteComponentFunction {
  return (component === void 0)
    ? () => Promise.reject<IRouteComponent>(new Error(`Missing component`))
    : (
      (typeof component === 'function')
        ? component as ILoadRouteComponentFunction
        : () => Promise.resolve<IRouteComponent>(component)
    );
}

/* ROUTE */

export function route(
  {
    path,
    children,
    canActivate = DEFAULT_CAN_ACTIVATE_FUNCTION,
    component,
    locateRouterOutletElement = DEFAULT_LOCATE_ROUTER_OUTLET,
  }: IRouteOptions,
): IRouteResolveFunction {
  const loadChildren: ILoadRouteChildrenFunction = createLoadRouteChildrenFunction(children);
  const loadComponent: ILoadRouteComponentFunction = createLoadRouteComponentFunction(component);

  return async (
    {
      path: pathToResolve,
      params,
      injectParentComponent,
    }: IRouteResolveOptions,
  ): Promise<void> => {

    const injectComponent = (
      parentNode: Element,
      component: IRouteComponent,
    ): Element => {
      const routerOutletInjectedElement: Element | null = parentNode.firstElementChild;

      // TODO provide 'params' as Observable in the constructor
      if (routerOutletInjectedElement === null) {
        return nodeAppendChild(parentNode, new component());
      } else {
        if (routerOutletInjectedElement.constructor === component) {
          // setAttributeValue(routerOutletInjectedElement, '');
          return routerOutletInjectedElement;
        } else {
          return nodeAppendChild(parentNode, new component());
        }
      }
    };

    const injectParentComponentAndComponent = async (): Promise<IRouterOutletElement> => {
      const parentNode: IRouterOutletElement = await injectParentComponent();
      if (component === void 0) {
        return parentNode;
      } else {
        const component: IRouteComponent = await loadComponent();
        return injectComponent(parentNode, component);
      }
    };

    const injectRouteAndLocateRouterOutletElement = async (): Promise<Element> => {
      return locateRouterOutletElement(await injectParentComponentAndComponent());
    };

    const regExp: RegExp = convertRoutePathToRegExp(path);
    const match: RegExpExecArray | null = regExp.exec(pathToResolve.toString());

    if (match === null) {
      throw createNotAValidPathForThisRouteError();
    } else {
      const remainingPath: Path = new Path(pathToResolve.toString().slice(match[0].length));
      const segmentParams: IRouteParams = match.groups ?? {};

      const children: IRouteChildren = await loadChildren();
      const childrenLength: number = children.length;

      if (childrenLength === 0) {
        if (remainingPath.toString() === '/') {
          await injectParentComponentAndComponent();
        } else {
          throw createNotAValidPathForThisRouteError();
        }
      } else {
        for (let i = 0; i < childrenLength; i++) {
          const child: HTMLElementConstructor = children[i];
          if (isRoute(child)) {
            try {
              await child.resolve({
                path: remainingPath,
                params: {
                  ...params,
                  ...segmentParams,
                },
                injectParentComponent: injectRouteAndLocateRouterOutletElement,
              });
            } catch (error: unknown) {
              if (isNotAValidPathForThisRouteError(error)) {
                continue;
              } else {
                throw error;
              }
            }
            return;
          } else {
            throw new Error(`Child ${ child.name } of ${ target.name } is not a Route`);
          }
        }

        if ((remainingPath.toString() === '/') && isEndPoint) {
          const routerOutletElement: Element = await injectRouteAndLocateRouterOutletElement();
          nodeRemoveChildren(routerOutletElement);
        } else {
          throw createNotAValidPathForThisRouteError();
        }
      }
    }
  };
}
