import { getDocumentBody, HTMLElementConstructor } from '../rx-dom/dist';
import { AppRootPageComponent } from '../../pages/root/root.page.component';
import { IPage, isPage } from '../page/page';
import { Path } from '../../path/path.class';
import { NAVIGATION } from '../../navigation/navigation';
import { getLocation } from '../../navigation/get-location';
import { getBaseURI } from '../../navigation/get-base-uri';
import {
  createRoutesResolver, createRouteResolver, IRouteResolveUndoFunction,
  IRouteResolveInjectParentComponentFunction, createDefaultInjectParentComponent, navigateTo
} from '../route/route';
import { AppNotFoundPageComponent } from '../../pages/404/not-found.page.component';
import { isCustomError } from '../../../../../../../rx-js-light/dist';
import { isRedirectToError } from '../errors/redirect-to-error/redirect-to-error';


// export function boostrapPage(
//   page: HTMLElementConstructor,
//   parentNode: Element = getDocumentBody(),
//   referenceNode?: Node | null,
// ): void {
//   if (isPage(page)) {
//     const update = () => {
//       console.log('resoling', getCurrentPath());
//       page.resolve({
//         path: getCurrentPath(),
//         params: {},
//         injectParentComponent: () => Promise.resolve(parentNode),
//       });
//     };
//
//     const  getCurrentPath = (): Path => {
//       const currentPathName: string = getLocation().pathname;
//       const baseURIPathName: string = new URL(getBaseURI()).pathname;
//       // getLocation().pathname.replace(new URL(getBaseURI()).pathname, '')
//       return new Path(
//         currentPathName.startsWith(baseURIPathName)
//           ? currentPathName.slice(baseURIPathName.length)
//           : currentPathName,
//       );
//     };
//
//     NAVIGATION.onChange(update);
//     update();
//
//   } else {
//     throw new Error(`Not a page`);
//   }
// }



/*-----------------*/


// async function resolvableTreeExample1() {
//   boostrapPage(AppRootPageComponent);
// }

async function resolvableTreeExample2() {
  const routes = [
    createRouteResolver({
      path: new Path('/home'),
      component: () => {
        return import('../../pages/home/home.page.component').then(_ => _.AppHomePageComponent);
      },
    }),
    createRouteResolver({
      path: new Path('/list'),
      component: () => {
        return import('../../pages/list/list.page.component').then(_ => _.AppListPageComponent);
      },
      children: [
        createRouteResolver({
          path: new Path('/'),
        }),
        createRouteResolver({
          path: new Path('/sub'),
          component: () => {
            return import('../pages/sub-list//sub-list.page.component').then(_ => _.AppSubListPageComponent);
          },
        }),
      ],
    }),
    createRouteResolver({
      path: new Path('/forbidden'),
      canActivate: navigateTo(new Path('/home')),
    }),
    createRouteResolver({
      path: new Path('/**'),
      component: () => {
        return import('../../pages/404/not-found.page.component').then(_ => _.AppNotFoundPageComponent);
      },
    }),
  ];

  const resolver = createRoutesResolver(routes);

  let previousUndoFunction: IRouteResolveUndoFunction;

  const DEFAULT_INJECT_PARENT_COMPONENT: IRouteResolveInjectParentComponentFunction = createDefaultInjectParentComponent();

  const update = async () => {
    try {
      previousUndoFunction = await resolver({
        path: getCurrentPath(),
        params: {},
        injectParentComponent: DEFAULT_INJECT_PARENT_COMPONENT,
        previousUndoFunction,
      });
    } catch (error: unknown) {
      if (isRedirectToError(error)) {
        NAVIGATION.navigate(error.url);
      } else {
        throw error;
      }
    }
  };

  const  getCurrentPath = (): Path => {
    const currentPathName: string = getLocation().pathname;
    const baseURIPathName: string = new URL(getBaseURI()).pathname;
    // getLocation().pathname.replace(new URL(getBaseURI()).pathname, '')
    return new Path(
      currentPathName.startsWith(baseURIPathName)
        ? currentPathName.slice(baseURIPathName.length)
        : currentPathName,
    );
  };

  NAVIGATION.onChange(update);
  update();
}

/*-----------------*/


export async function resolvableTreeExample() {
  // await resolvableTreeExample1();
  await resolvableTreeExample2();
}

