import { Path } from '../router/path/path.class';
import {
  getDocumentBody, HTMLElementConstructor, IParentNode, nodeAppendChild, nodeRemove
} from '../../../../../../rx-dom/dist';
import { convertRoutePathToRegExp } from '../router/route/convert-route-path-to-reg-exp';
import {
  generateRouterOutletHTML,
  locateRouterOutletElement, normalizeRouterOutletSelector, ROUTER_OUTLET_TAG_NAME
} from '../router/rx/rx-router-outlet';
import { getLocation } from '../navigation/get-location';
import { getBaseURI } from '../navigation/get-base-uri';
import { NAVIGATION } from '../navigation/navigation';
import { IInjectedRXRoutes } from '../router/rx/rx-route.type';
import { IRXRouterUpdateOptions } from '../router/rx/rx-router.class';
import { isAbortError, noop } from '../../../../../../rx-js-light/dist';

// TODO signal to abort ?

/*------------------*/

export function isError(
  value: unknown,
): value is Error {
  return (value instanceof Error);
}


/*------------------*/

export interface INotAValidPathForThisRouteError extends Error {
  name: 'NotAValidPathForThisRouteError';
}

export function createNotAValidPathForThisRouteError(): INotAValidPathForThisRouteError {
  const error: INotAValidPathForThisRouteError = new Error(`Not a valid path for this route`) as INotAValidPathForThisRouteError;
  error.name = 'NotAValidPathForThisRouteError';
  return error;
}

export function isNotAValidPathForThisRouteError(
  value: unknown,
): value is INotAValidPathForThisRouteError {
  return isError(value)
    && (value.name === 'NotAValidPathForThisRouteError');
}


/*------------------*/

export interface ICanActivateFunction {
  (): Promise<Path | void>;
}

export interface ILoadComponentFunction {
  (): Promise<HTMLElementConstructor>;
}

export interface ICreateRXRouteOptions {
  path: Path;
  children?: IRXRoute[];
  canActivate?: ICanActivateFunction;

  component?: ILoadComponentFunction;
}

export interface IRXRouteParams {
  [key: string]: string;
}

export interface IRXRouteOptions {
  path: Path;
  params?: IRXRouteParams;
  injectParentComponent?: () => Promise<HTMLElement>,
  signal: AbortSignal,
}

export interface IRXRoute {
  (options: IRXRouteOptions): Promise<void>;
}


export function createRXRoute(
  {
    path,
    children = [],
    canActivate,
    component,
  }: ICreateRXRouteOptions,
): IRXRoute {
  return async (
    {
      path: pathToResolve,
      params = {},
      injectParentComponent = () => Promise.resolve(getDocumentBody()),
      signal,
    }: IRXRouteOptions,
  ): Promise<void> => {
    const regExp: RegExp = convertRoutePathToRegExp(path);
    const match: RegExpExecArray | null = regExp.exec(pathToResolve.toString());

    if (match === null) {
      throw createNotAValidPathForThisRouteError();
    } else {
      const remainingPath: Path = new Path(pathToResolve.toString().slice(match[0].length));
      const childrenLength: number = children.length;
      const segmentParams: IRXRouteParams = match.groups ?? {};


      const injectComponent = async (): Promise<HTMLElement> => {
        const parentElement: HTMLElement = await injectParentComponent();
        if (component === void 0) {
          return parentElement;
        } else {
          const [componentConstructor, routerOutletElement]: [HTMLElementConstructor, HTMLElement] = await Promise.all([
            component(),
            locateRouterOutletElement(ROUTER_OUTLET_TAG_NAME, parentElement, signal),
          ]);

          const routerOutletInjectedElement: Element | null = routerOutletElement.firstElementChild;

          if (routerOutletInjectedElement !== null) {
            if (routerOutletInjectedElement.constructor === componentConstructor) {
              return routerOutletElement;
            } else {
              nodeRemove(routerOutletInjectedElement);
            }
          }

          const element: HTMLElement = new componentConstructor();

          nodeAppendChild(routerOutletElement, element);

          return element;
        }
      };

      if (childrenLength > 0) {
        for (let i = 0; i < childrenLength; i++) {
          try {
            await children[i]({
              path: remainingPath,
              params: {
                ...params,
                ...segmentParams,
              },
              injectParentComponent: injectComponent,
              signal,
            });
          } catch (error: unknown) {
            if (isNotAValidPathForThisRouteError(error)) {
              continue;
            } else {
              throw error;
            }
          }
          return;
        }
        throw createNotAValidPathForThisRouteError();
      } else {
        if (remainingPath.toString() === '/') {
          const element: HTMLElement = await injectComponent();
          try {
            const routerOutletElement: HTMLElement = await locateRouterOutletElement(ROUTER_OUTLET_TAG_NAME, element, signal);
            if (routerOutletElement.firstElementChild !== null) {
              nodeRemove(routerOutletElement.firstElementChild);
            }
          } catch {}
        } else {
          throw createNotAValidPathForThisRouteError();
        }
      }
    }
  };
}


async function resolvableTreeExample1() {

  document.body.innerHTML = `
    ${ generateRouterOutletHTML() }
  `;

  const homeRoute = createRXRoute({
    path: new Path('/home'),
    canActivate: () => {
      return Promise.resolve();
    },
    component: async () => (await import('../pages/home/home.page.component')).AppHomePageComponent,
  });

  const listRouteDefault = createRXRoute({
    path: new Path('/'),
  });

  const listRouteSub = createRXRoute({
    path: new Path('/sub'),
    component: async () => (await import('../pages/sub-list/sub-list.page.component')).AppSubListPageComponent,
  });

  const listRoute = createRXRoute({
    path: new Path('/list'),
    component: async () => (await import('../pages/list/list.page.component')).AppListPageComponent,
    children: [
      listRouteDefault,
      listRouteSub,
    ],
  });

  const tree = createRXRoute({
    path: new Path('/'),
    children: [
      homeRoute,
      listRoute,
    ],
  });

  // const path = new Path('/');
  // const path = new Path('/list');

  // const controller = new AbortController();
  // const signal = controller.signal;
  //
  // await tree({ path, signal });


  const getCurrentPath = (): Path => {
    const currentPathName: string = getLocation().pathname;
    const baseURIPathName: string = new URL(getBaseURI()).pathname;
    // getLocation().pathname.replace(new URL(getBaseURI()).pathname, '')
    return new Path(
      currentPathName.startsWith(baseURIPathName)
        ? currentPathName.slice(baseURIPathName.length)
        : currentPathName,
    );
  };

  const update = (
    path: Path,
  ): Promise<void> => {
    const controller = new AbortController();
    const signal = controller.signal;
    return tree({ path, signal });
  };

  const refresh = (): Promise<void> => {
    return update(getCurrentPath());
  };


  const refreshAndCatch = () => {
    return refresh()
      .then(noop, (error: any) => {
        if (!isAbortError(error)) {
          // this._onError(error);
        }
      });
  };

  NAVIGATION.onChange(() => {
    refreshAndCatch();
  });

  refreshAndCatch();
}

/*-----------------*/


export async function resolvableTreeExample() {
  await resolvableTreeExample1();
}

