
/*
https://en.wikipedia.org/wiki/Jerk_(physics)

 */

/*
{1} a = a
{2} v = (a * t) + vi
{3} d = (0.5 * a * t²) + (vi * t) + di


COMPUTE t

having: a, v, vi
->{2} v = (a * t) + vi
{t.1} t = (v - vi) / a

having: a, d, vi
->{3} d = (0.5 * a * t²) + (vi * t) + di
delta = vi² - (2 * a * (di - d))
{t.2} t = (-vi +- sqrt(delta)) / a


COMPUTE a

having: t, d, vi
->{3}  d = (0.5 * a * t²) + (vi * t) + di
       a = (d - (vi * t) - di) / (0.5 * t²)
{a.1}  a = ((d - di) - (vi * t)) / (0.5 * t²)
{a.1'} a = (((d - di) - (vi * t)) * 2) / t²


COMPUTE d

having: a, v, vi
->{t.1} t = (v - vi) / a
->{3}   d = (0.5 * a * t²) + (vi * t) + di
->{d.1} d = (v² - vi²) / (2 * a) + di

--

a² * x + b* x + c = 0
d = b² - 4 * a * c
y = (-b +- sqrt(d)) / 2a

--

R = Reals = ]-∞, +∞[
R+ = Positive Reals = [0, +∞[

un mouvement (M) est composé d'une vitesse initiale, d'une acceleration et d'une distance par axe
chaque axe est contraint par une acceleration, une vitesse max et un "jerk" entre deux mouvements

mouvement optimisé: [...distances par axe (R), vitesse initiale (R+), acceleration (R+)]

calculer pour M1 sa vitesse finale maximale atteignable par axe
pour ce faire:
- calculer pour chaque axe le temps qu'il faut: (4) => t[i],
 en utilisant les contraintes max de l'axe (a = a_max, vi = ancien vi, d = distance a faire, et v_max)
- prendre le max parmi tous ces temps => m1_t_max = max(...t[i])
- calculer vf par axe: (2) => vf[i] = min(a_max[i] * t[i] + vi[i], v_max[i])

calculer pour M2 sa vitesse initiale max par axe:
- le calcule est similaire au precedent mais en inverse

comparer vf_m1[i] avec vi_m2[i]: // TODO prendre en compte les valeurs negatives
- vf_m1[i] <= vi_m2[i], alors ce mouvement est realisable sans problème pour cet axe
- (vf_m1[i] + jerk_m1) <= (vi_m2[i] - jerk_m2), alors ce mouvement est realisable avec jerk
- sinon: il faut réduire vi_m2[i]
=> vi_m2[i] = valeur la plus proche de zero pour (vf_m1[i] + jerk_m1, vi_m2[i] - jerk_m2)


 */

/*-----------------*/

interface ISingleAxisMovementConstraint {
  maxVelocity: number; // (R+)
  maxAcceleration: number; // (R+)
  maxJerk: number; // (R+)
}

interface ISingleAxisMovement extends ISingleAxisMovementConstraint {
  distance: number;
  initialVelocity: number;
}

type IMultiAxisMovement = ArrayLike<ISingleAxisMovement>;

type ITerminalVelocities = ArrayLike<number>;

/*-----------------*/

function computeOptimalTransitionVelocity(
  movementA: IMultiAxisMovement,
  movementB: IMultiAxisMovement,
): number {
  const length: number = movementA.length;

  const transitionVelocities: number[]  = new Array<number>(length);
  const terminalVelocities = getTerminalVelocitiesToPerformMultiAxisMovement(movementA);
  const initialVelocities = getInitialVelocitiesToPerformMultiAxisMovement(movementB);

  console.log(terminalVelocities);
  console.log(initialVelocities);

  // for (let i = 0; i < length; i++) {
  //   const maxJerkA: number = movementA[i].maxJerk;
  //   const maxJerkB: number = movementB[i].maxJerk;
  //   const terminalVelocity = terminalVelocities[i];
  //   const initialVelocity = initialVelocities[i];
  //   // transitionVelocities[i] = Math.min(terminalVelocity, initialVelocity + maxJerkA + maxJerkB);
  //   // if ()
  //   transitionVelocities[i] = Math.min(terminalVelocity, initialVelocity + maxJerkA + maxJerkB);
  // }
  //
  // console.log(transitionVelocities);

  return -1;
}


/**
 * Computes the duration to travel 'distance' at 'maxAcceleration', not constrained by 'maxVelocity'
 */
function computeDurationToTravelDistanceAtMaxAccelerationForMultiAxisMovement(
  movement: IMultiAxisMovement,
): number {
  const length: number = movement.length;

  let multiAxisDuration: number = 0;

  for (let i = 0; i < length; i++) {
    const {
      distance,
      initialVelocity,
      maxAcceleration,
    }: ISingleAxisMovement = movement[i];

    // compute the duration to travel the movement's distance on this axis with its maximum acceleration constraint
    const singleAxisDuration: number = (Math.sqrt((initialVelocity * initialVelocity) + (2 * maxAcceleration * Math.abs(distance))) - initialVelocity) / maxAcceleration;

    // we take the maximum of all of these durations,
    // because the movement can't go faster than its longest duration
    multiAxisDuration = Math.max(
      multiAxisDuration,
      singleAxisDuration,
    );
  }

  return multiAxisDuration;
}

/**
 * Computes the duration to reach 'maxVelocity' at 'maxAcceleration', not constrained by 'distance'
 */
function computeDurationToReachMaxVelocityAtMaxAccelerationForMultiAxisMovement(
  movement: IMultiAxisMovement,
): [number, number] {
  const length: number = movement.length;

  let multiAxisDuration: number = Number.POSITIVE_INFINITY;
  let multiAxisDistance: number = 1;

  for (let i = 0; i < length; i++) {
    const {
      distance,
      initialVelocity,
      maxVelocity,
      maxAcceleration,
    }: ISingleAxisMovement = movement[i];

    // compute the duration to reach the movement's maximum velocity defined by its constraints
    const singleAxisDuration: number = (maxVelocity - initialVelocity) / maxAcceleration;

    // we take the minium of all of these durations,
    // because the movement can't accelerate longer than its shortest accelerating duration
    multiAxisDuration = Math.min(
      multiAxisDuration,
      singleAxisDuration,
    );

    // ->{3} d = (0.5 * a * t²) + (vi * t) + di
    // const singleAxisDistance: number = (0.5 * maxAcceleration * singleAxisDuration * singleAxisDuration) + initialVelocity * singleAxisDuration;

    // ->{d.1} d = (v² - vi²) / (2 * a) + di
    // then normalize the distance
    const singleAxisDistance: number = ((maxVelocity * maxVelocity) - (initialVelocity * initialVelocity)) / (Math.abs(distance) * 2 * maxAcceleration);

    multiAxisDistance = Math.min(
      multiAxisDistance,
      singleAxisDistance,
    );
  }

  return [multiAxisDuration, multiAxisDistance];
}


interface IDurationAndDistanceRatio {
  duration: number;
  distanceRatio: number;
}

/**
 * Computes the duration and distance while we can accelerate at 'maxAcceleration'
 * until we travel 'distance' or we reach 'maxVelocity'
 */
function computeDurationAndDistanceRatioToTravelDistanceOrReachMaxVelocityAtMaxAccelerationForMultiAxisMovement(
  movement: IMultiAxisMovement,
): IDurationAndDistanceRatio {
  const length: number = movement.length;

  let duration: number = Number.POSITIVE_INFINITY;
  let distanceRatio: number = 1;

  for (let i = 0; i < length; i++) {
    const {
      distance,
      initialVelocity,
      maxAcceleration,
      maxVelocity,
    }: ISingleAxisMovement = movement[i];

    // compute the distance to reach the movement's maximum velocity defined by its constraints
    const singleAxisDistanceRatioToReachMaxVelocityAtMaxAcceleration: number = ((maxVelocity * maxVelocity) - (initialVelocity * initialVelocity)) / (Math.abs(distance) * 2 * maxAcceleration);

    // we reached max velocity
    if (singleAxisDistanceRatioToReachMaxVelocityAtMaxAcceleration < distanceRatio) {
      duration = (maxVelocity - initialVelocity) / maxAcceleration;
      distanceRatio = singleAxisDistanceRatioToReachMaxVelocityAtMaxAcceleration;
    }
  }

  // we didn't reach max velocity => fully accelerating
  if (distanceRatio === 1) {
    duration = 0;

    for (let i = 0; i < length; i++) {
      const {
        distance,
        initialVelocity,
        maxAcceleration,
      }: ISingleAxisMovement = movement[i];

      // compute the duration to travel the movement's distance on this axis with its maximum acceleration constraint
      const singleAxisDuration: number = (Math.sqrt((initialVelocity * initialVelocity) + (2 * maxAcceleration * Math.abs(distance))) - initialVelocity) / maxAcceleration;

      // we take the maximum of all of these durations,
      // because the movement can't go faster than its longest duration
      duration = Math.max(
        duration,
        singleAxisDuration,
      );
    }
  }

  return {
    duration,
    distanceRatio,
  };
}


// function computeDurationAndDistanceRatioToTravelDistanceOrReachMaxVelocityAtMaxAccelerationForMultiAxisMovement(
//   movement: IMultiAxisMovement,
// ): IDurationAndDistanceRatio {
//   const length: number = movement.length;
//
//   let reachesMaxVelocity: boolean = false;
//   let duration: number = 0;
//   let distanceRatio: number = 1;
//
//   for (let i = 0; i < length; i++) {
//     const {
//       distance,
//       initialVelocity,
//       maxAcceleration,
//       maxVelocity,
//     }: ISingleAxisMovement = movement[i];
//
//     // compute the duration to reach the movement's maximum velocity defined by its constraints
//     const singleAxisDurationToReachMaxVelocityAtMaxAcceleration: number = (maxVelocity - initialVelocity) / maxAcceleration;
//
//     if (!reachesMaxVelocity) {
//       // compute the duration to travel the movement's distance on this axis with its maximum acceleration constraint
//       const singleAxisDurationToTravelDistanceAtMaxAcceleration: number = (Math.sqrt((initialVelocity * initialVelocity) + (2 * maxAcceleration * Math.abs(distance))) - initialVelocity) / maxAcceleration;
//
//       if (singleAxisDurationToReachMaxVelocityAtMaxAcceleration < singleAxisDurationToTravelDistanceAtMaxAcceleration) {
//         reachesMaxVelocity = true;
//       } else {
//         // we take the maximum of all of these durations,
//         // because the movement can't go faster than its longest duration
//         duration = Math.max(
//           duration,
//           singleAxisDurationToTravelDistanceAtMaxAcceleration,
//         );
//         continue;
//       }
//     }
//
//     if (reachesMaxVelocity && (singleAxisDurationToReachMaxVelocityAtMaxAcceleration < duration)) {
//       // because the movement can't accelerate longer than its shortest accelerating duration
//       duration = singleAxisDurationToReachMaxVelocityAtMaxAcceleration;
//
//       // ->{3} d = (0.5 * a * t²) + (vi * t) + di
//       // const singleAxisDistance: number = (0.5 * maxAcceleration * singleAxisDuration * singleAxisDuration) + initialVelocity * singleAxisDuration;
//
//       // ->{d.1} d = (v² - vi²) / (2 * a) + di
//       // then normalize the distance
//       distanceRatio = ((maxVelocity * maxVelocity) - (initialVelocity * initialVelocity)) / (Math.abs(distance) * 2 * maxAcceleration);
//     }
//   }
//
//   console.log(duration, distanceRatio);
//   return {
//     duration,
//     distanceRatio,
//   };
// }

// function computeDurationAndDistanceToTravelDistanceOrReachMaxVelocityAtMaxAccelerationForMultiAxisMovement(
//   movement: IMultiAxisMovement,
// ): IDurationAndDistance {
//   const length: number = movement.length;
//
//   let multiAxisDurationToTravelDistanceAtMaxAcceleration: number = 0;
//   let duration: number = Number.POSITIVE_INFINITY;
//   let distance: number = 1;
//
//   for (let i = 0; i < length; i++) {
//     const {
//       distance,
//       initialVelocity,
//       maxAcceleration,
//       maxVelocity,
//     }: ISingleAxisMovement = movement[i];
//
//     // compute the duration to travel the movement's distance on this axis with its maximum acceleration constraint
//     const singleAxisDurationToTravelDistanceAtMaxAcceleration: number = (Math.sqrt((initialVelocity * initialVelocity) + (2 * maxAcceleration * Math.abs(distance))) - initialVelocity) / maxAcceleration;
//
//     // we take the maximum of all of these durations,
//     // because the movement can't go faster than its longest duration
//     multiAxisDurationToTravelDistanceAtMaxAcceleration = Math.max(
//       multiAxisDurationToTravelDistanceAtMaxAcceleration,
//       singleAxisDurationToTravelDistanceAtMaxAcceleration,
//     );
//
//     // compute the duration to reach the movement's maximum velocity defined by its constraints
//     const singleAxisDurationToReachMaxVelocityAtMaxAcceleration: number = (maxVelocity - initialVelocity) / maxAcceleration;
//
//   }
//
//   // const duration = multiAxisDurationToTravelDistanceAtMaxAcceleration();
//
//   return {
//     duration,
//     distance,
//   };
// }

/**
 * Computes the duration to travel 'distance' at 'maxVelocity', not accelerating
 */
function computeDurationToTravelDistanceAtMaxVelocityForMultiAxisMovement(
  movement: IMultiAxisMovement,
): number {
  const length: number = movement.length;

  let multiAxisDuration: number = 0;

  for (let i = 0; i < length; i++) {
    const {
      distance,
      maxVelocity,
    }: ISingleAxisMovement = movement[i];

    // compute the duration to travel the movement's distance at its maximum velocity constraint
    const singleAxisDuration: number =  Math.abs(distance) / maxVelocity;

    // we take the maximum of all of these durations,
    // because the movement can't go faster than its longest duration
    multiAxisDuration = Math.max(
      multiAxisDuration,
      singleAxisDuration,
    );
  }

  return multiAxisDuration;
}

// /**
//  * Computes the duration while we can accelerate at 'maxAcceleration'
//  * until we travel 'distance' or we reach 'maxVelocity'
//  */
// function computeDurationToTravelDistanceOrReachMaxVelocityAtMaxAccelerationForMultiAxisMovement(
//   movement: IMultiAxisMovement,
// ): number {
//   return Math.min(
//     computeDurationToTravelDistanceAtMaxAccelerationForMultiAxisMovement(movement),
//     computeDurationToReachMaxVelocityAtMaxAccelerationForMultiAxisMovement(movement),
//   );
// }



function getTerminalVelocitiesToPerformMultiAxisMovement(
  movement: IMultiAxisMovement,
): ITerminalVelocities {
  const length: number = movement.length;
  const terminalVelocities: number[]  = new Array<number>(length);

  const {
    duration,
    distanceRatio,
  } = computeDurationAndDistanceRatioToTravelDistanceOrReachMaxVelocityAtMaxAccelerationForMultiAxisMovement(movement);

  for (let i = 0; i < length; i++) {
    const {
      distance,
      initialVelocity,
    }: ISingleAxisMovement = movement[i];
    // (5') a = (((d - di) - (vi * t)) * 2) / t²
    // (2) vt = a * t + vi
    // vt = (((d - (vi * t)) * 2) / t²) * t + vi
    // vt = (((d - (vi * t)) * 2) / t) + vi
    terminalVelocities[i] = (((distance * distanceRatio - (initialVelocity * duration )) * 2) / duration) + initialVelocity;
  }

  return terminalVelocities;
}


// function getTerminalVelocitiesToPerformMultiAxisMovement(
//   movement: IMultiAxisMovement,
// ): ITerminalVelocities {
//   const length: number = movement.length;
//   const terminalVelocities: number[]  = new Array<number>(length);
//
//   const multiAxisDuration: number = computeDurationToTravelDistanceOrReachMaxVelocityAtMaxAccelerationForMultiAxisMovement(movement);
//
//   for (let i = 0; i < length; i++) {
//     const {
//       distance,
//       initialVelocity,
//       maxVelocity,
//     }: ISingleAxisMovement = movement[i];
//     // (5') a = (((d - di) - (vi * t)) * 2) / t²
//     // (2) vt = a * t + vi
//     // vt = (((d - (vi * t)) * 2) / t²) * t + vi
//     // vt = (((d - (vi * t)) * 2) / t) + vi
//
//
//     // terminalVelocities[i] = Math.min(
//     //   (((distance - (initialVelocity * multiAxisDuration )) * 2) / multiAxisDuration) + initialVelocity,
//     //   maxVelocity,
//     // );
//
//     // terminalVelocities[i] = initialVelocity +
//   }
//
//   return terminalVelocities;
// }


function getInitialVelocitiesToPerformMultiAxisMovement(
  movement: IMultiAxisMovement,
): ITerminalVelocities {
  const length: number = movement.length;
  const initialVelocities: number[]  = new Array<number>(length);

  const multiAxisDuration: number = computeDurationToTravelDistanceAtMaxVelocityForMultiAxisMovement(movement);

  for (let i = 0; i < length; i++) {
    const {
      distance,
    }: ISingleAxisMovement = movement[i];
    // (3) d = vi * t <=> vi = d / t
    initialVelocities[i] = distance / multiAxisDuration;
  }

  return initialVelocities;
}

/*-----------------*/



export function debugMovement() {
  const axeAConstraint: ISingleAxisMovementConstraint = {
    maxVelocity: 10,
    maxAcceleration: 1,
    maxJerk: 0.1,
  };

  const axeBConstraint: ISingleAxisMovementConstraint = {
    maxVelocity: 10,
    maxAcceleration: 1,
    maxJerk: 0.1,
  };

  // (10, 0)
  const movementA: IMultiAxisMovement = [
    {
      distance: 10,
      initialVelocity: 0,
      ...axeAConstraint,
    },
    {
      distance: 0,
      initialVelocity: 0,
      ...axeBConstraint,
    }
  ];

  // (10, 10)
  const movementB: IMultiAxisMovement = [
    {
      distance: 10,
      initialVelocity: 0,
      ...axeAConstraint,
    },
    {
      distance: 10,
      initialVelocity: 0,
      ...axeBConstraint,
    }
  ];

  // right angle movement (pure X, the  pure Y)
  // const movementA: IMultiAxisMovement = [
  //   {
  //     distance: 10,
  //     initialVelocity: 0,
  //     ...axeAConstraint,
  //   },
  //   {
  //     distance: 0,
  //     initialVelocity: 0,
  //     ...axeBConstraint,
  //   }
  // ];
  //
  // const movementB: IMultiAxisMovement = [
  //   {
  //     distance: 0,
  //     initialVelocity: 0,
  //     ...axeAConstraint,
  //   },
  //   {
  //     distance: 10,
  //     initialVelocity: 0,
  //     ...axeBConstraint,
  //   }
  // ];

  // const movementA: IMultiAxisMovement = [
  //   {
  //     distance: 10,
  //     initialVelocity: 0,
  //     ...axeAConstraint,
  //   },
  //   {
  //     distance: -10,
  //     initialVelocity: 0,
  //     ...axeBConstraint,
  //   }
  // ];
  //
  // const movementB: IMultiAxisMovement = [
  //   {
  //     distance: 10,
  //     initialVelocity: 0,
  //     ...axeAConstraint,
  //   },
  //   {
  //     distance: 10,
  //     initialVelocity: 0,
  //     ...axeBConstraint,
  //   }
  // ];

  computeOptimalTransitionVelocity(
    movementA,
    movementB,
  );
}

