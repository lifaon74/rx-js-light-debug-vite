/*
https://en.wikipedia.org/wiki/Jerk_(physics)

 */

/*
{1} a = a
{2} v = (a * t) + vi
{3} d = (0.5 * a * t²) + (vi * t) + di


COMPUTE t

having: a, v, vi
->{2} v = (a * t) + vi
{t.1} t = (v - vi) / a

having: a, d, vi
->{3} d = (0.5 * a * t²) + (vi * t) + di
delta = vi² - (2 * a * (di - d))
{t.2} t = (-vi +- sqrt(delta)) / a


COMPUTE a

having: t, d, vi
->{3}  d = (0.5 * a * t²) + (vi * t) + di
       a = (d - (vi * t) - di) / (0.5 * t²)
{a.1}  a = ((d - di) - (vi * t)) / (0.5 * t²)
{a.1'} a = (((d - di) - (vi * t)) * 2) / t²


COMPUTE d

having: a, v, vi
->{t.1} t = (v - vi) / a
->{3}   d = (0.5 * a * t²) + (vi * t) + di
->{d.1} d = (v² - vi²) / (2 * a) + di

--

a² * x + b* x + c = 0
d = b² - 4 * a * c
y = (-b +- sqrt(d)) / 2a

--

R = Reals = ]-∞, +∞[
R+ = Positive Reals = [0, +∞[
R++ = Non Zero Positive Reals = ]0, +∞[

un mouvement (M) est composé d'une vitesse initiale, d'une acceleration et d'une distance par axe
chaque axe est contraint par une acceleration, une vitesse max et un "jerk" entre deux mouvements

mouvement optimisé: [...distances par axe (R), vitesse initiale (R+), acceleration (R+)]

calculer pour M1 sa vitesse finale maximale atteignable par axe
pour ce faire:
- calculer pour chaque axe le temps qu'il faut: (4) => t[i],
 en utilisant les contraintes max de l'axe (a = a_max, vi = ancien vi, d = distance a faire, et v_max)
- prendre le max parmi tous ces temps => m1_t_max = max(...t[i])
- calculer vf par axe: (2) => vf[i] = min(a_max[i] * t[i] + vi[i], v_max[i])

calculer pour M2 sa vitesse initiale max par axe:
- le calcule est similaire au precedent mais en inverse

comparer vf_m1[i] avec vi_m2[i]: // TODO prendre en compte les valeurs negatives
- vf_m1[i] <= vi_m2[i], alors ce mouvement est realisable sans problème pour cet axe
- (vf_m1[i] + jerk_m1) <= (vi_m2[i] - jerk_m2), alors ce mouvement est realisable avec jerk
- sinon: il faut réduire vi_m2[i]
=> vi_m2[i] = valeur la plus proche de zero pour (vf_m1[i] + jerk_m1, vi_m2[i] - jerk_m2)


 */

/*-----------------*/

function cubeRoot(
  x: number,
): number {
  return Math.cbrt(x);
  // const y: number = Math.pow(Math.abs(x), 1 / 3);
  // return (x < 0)
  //   ? -y
  //   : y;
}

const EPSILON: number = 1e-8;

// https://stackoverflow.com/questions/27176423/function-to-solve-cubic-equation-analytically

function solveCubic(
  a: number,
  b: number,
  c: number,
  d: number,
): number[] {
  if (Math.abs(a) < EPSILON) { // Quadratic case, ax^2+bx+c=0
    a = b;
    b = c;
    c = d;

    if (Math.abs(a) < EPSILON) { // Linear case, ax+b=0
      a = b;
      b = c;

      return (Math.abs(a) < EPSILON)// Degenerate case
        ? []
        : [-b / a];
    }

    const D: number = b * b - 4 * a * c;

    if (Math.abs(D) < EPSILON) {
      return [-b / (2 * a)];
    } else if (D > 0) {
      return [
        (-b + Math.sqrt(D)) / (2 * a),
        (-b - Math.sqrt(D)) / (2 * a),
      ];
    } else {
      return [];
    }
  }

  // Convert to depressed cubic t^3+pt+q = 0 (subst x = t - b/3a)
  const p: number = (3 * a * c - b * b) / (3 * a * a);
  const q: number = (2 * b * b * b - 9 * a * b * c + 27 * a * a * d) / (27 * a * a * a);
  let roots: number[];

  if (Math.abs(p) < EPSILON) { // p = 0 -> t^3 = -q -> t = -q^1/3
    roots = [cubeRoot(-q)];
  } else if (Math.abs(q) < EPSILON) { // q = 0 -> t^3 + pt = 0 -> t(t^2+p)=0
    roots = [0].concat(p < 0 ? [Math.sqrt(-p), -Math.sqrt(-p)] : []);
  } else {
    const D: number = q * q / 4 + p * p * p / 27;
    if (Math.abs(D) < EPSILON) {       // D = 0 -> two roots
      roots = [-1.5 * q / p, 3 * q / p];
    } else if (D > 0) {             // Only one real root
      const u: number = cubeRoot(-q / 2 - Math.sqrt(D));
      roots = [u - p / (3 * u)];
    } else {                        // D < 0, three roots, but needs to use complex numbers/trigonometric solution
      const u: number = 2 * Math.sqrt(-p / 3);
      const t: number = Math.acos(3 * q / p / u) / 3;  // D < 0 implies p < 0 and acos argument in [-1..1]
      const k: number = 2 * Math.PI / 3;

      roots = [
        u * Math.cos(t),
        u * Math.cos(t - k),
        u * Math.cos(t - 2 * k),
      ];
    }
  }

  // Convert back from depressed cubic
  for (let i = 0; i < roots.length; i++) {
    roots[i] -= b / (3 * a);
  }

  return roots;
}

/*-----------------*/

interface IMovementConstraint {
  maxJerk: number; // (R++)
  maxAcceleration: number; // (R++)
  maxVelocity: number; // (R++)
}

interface IConstrainedSingleAxisMovement extends IMovementConstraint {
  distance: number;
}

type IConstrainedMultiAxisMovement = IConstrainedSingleAxisMovement[];

interface IMovement {
  initialJerkNormalized: number; // normalized
  initialAccelerationNormalized: number; // normalized
  initialVelocityNormalized: number;  // normalized
  distances: number[];
}

interface IDurationWithAxisIndex {
  duration: number;
  axisIndex: number;
}

/*-----------------*/

function getMovementDuration(
  {
    initialJerkNormalized,
    initialAccelerationNormalized,
    initialVelocityNormalized,
  }: IMovement,
): number {
  const durations: number[] = solveCubic(
    initialJerkNormalized / 6,
    initialAccelerationNormalized / 2,
    initialVelocityNormalized,
    -1,
  );

  let _duration: number = Number.POSITIVE_INFINITY;
  for (let i = 0, l = durations.length; i < l; i++) {
    const duration: number = durations[i];
    if ((duration >= 0) && (duration < _duration)) {
      _duration = duration;
    }
  }

  // console.log(`durations: ${durations.join(', ')} -> ${ duration }`);

  return _duration;
}

function logMovementDetails(
  movement: IMovement,
): void {
  const duration: number = getMovementDuration(movement);

  console.log(`duration: ${duration}`);

  const {
    initialJerkNormalized,
    initialAccelerationNormalized,
    initialVelocityNormalized,
    distances,
  } = movement;

  for (let i = 0, l = distances.length; i < l; i++) {
    const distance: number = distances[i];

    const initialJerk: number = initialJerkNormalized * distance;
    const initialAcceleration: number = initialAccelerationNormalized * distance;
    const initialVelocity: number = initialVelocityNormalized * distance;

    // const terminalAcceleration: number = initialJerk * duration;
    // const terminalVelocity: number = (initialJerk / 2) * (duration ** 2) + initialAcceleration;
    // const terminalDistance: number = (initialJerk / 6) * (duration ** 3)
    //   + (initialAcceleration / 2) * (duration ** 2)
    //   + (initialVelocity * duration);

    const terminalAcceleration: number = (initialJerk * duration)
      + initialAcceleration;
    const terminalVelocity: number = ((initialJerk / 2) * (duration ** 2))
      + (initialAcceleration * duration)
      + initialVelocity;
    const terminalDistance: number = (initialJerk / 6) * (duration ** 3)
      + (initialAcceleration / 2) * (duration ** 2)
      + (initialVelocity * duration);

    const data: [string, any][] = [
      ['distance', distance],
      ['initial jerk', initialJerk],
      ['initial acceleration', initialAcceleration],
      ['initial velocity', initialVelocity],
      ['terminal acceleration', terminalAcceleration],
      ['terminal velocity', terminalVelocity],
      ['terminal distance', terminalDistance],
    ];

    const dataString: string = data.map(([key, value]) => `\t${key}: ${value}`).join('\n');

    console.log(`axis #${i}\n${dataString}`);

  }
}

/*-----------------*/

function computeMultiAxisMovementJerkDuration(
  multiAxisMovement: IConstrainedMultiAxisMovement,
  distanceRatio: number,
): IDurationWithAxisIndex {
  const length: number = multiAxisMovement.length;

  // duration to reach distance at maxJerk
  let multiAxisDurationToReachDistanceAtMaxJerk: number = 0;
  let axisIndexToReachDistanceAtMaxJerk: number = -1;

  // duration to reach maxAcceleration or maxVelocity at maxJerk
  let multiAxisDurationToReachMaxAccelerationOrMaxVelocityAtMaxJerk: number = Number.POSITIVE_INFINITY;
  let axisIndexToReachMaxAccelerationOrMaxVelocityAtMaxJerk: number = -1;

  for (let i = 0; i < length; i++) {
    const {
      maxJerk,
      maxAcceleration,
      maxVelocity,
      distance,
    } = multiAxisMovement[i];

    const singleAxisDurationToReachDistanceAtMaxJerk: number = Math.cbrt((6 * distance * distanceRatio) / maxJerk);

    if (singleAxisDurationToReachDistanceAtMaxJerk > multiAxisDurationToReachDistanceAtMaxJerk) {
      axisIndexToReachDistanceAtMaxJerk = i;
      multiAxisDurationToReachDistanceAtMaxJerk = singleAxisDurationToReachDistanceAtMaxJerk;
    }

    const singleAxisDurationToReachMaxVelocityAtMaxJerk: number = Math.sqrt((2 * maxVelocity) / maxJerk);
    const singleAxisDurationToReachMaxAccelerationAtMaxJerk: number = maxAcceleration / maxJerk;

    const singleAxisDurationToReachMaxAccelerationOrMaxVelocityAtMaxJerk: number = Math.min(
      singleAxisDurationToReachMaxVelocityAtMaxJerk,
      singleAxisDurationToReachMaxAccelerationAtMaxJerk,
    );

    if (singleAxisDurationToReachMaxAccelerationOrMaxVelocityAtMaxJerk < multiAxisDurationToReachMaxAccelerationOrMaxVelocityAtMaxJerk) {
      axisIndexToReachMaxAccelerationOrMaxVelocityAtMaxJerk = i;
      multiAxisDurationToReachMaxAccelerationOrMaxVelocityAtMaxJerk = singleAxisDurationToReachMaxAccelerationOrMaxVelocityAtMaxJerk;
    }
  }

  if (multiAxisDurationToReachMaxAccelerationOrMaxVelocityAtMaxJerk < multiAxisDurationToReachDistanceAtMaxJerk) { // reaches maxAcceleration or maxVelocity first
    return {
      duration: multiAxisDurationToReachMaxAccelerationOrMaxVelocityAtMaxJerk,
      axisIndex: axisIndexToReachMaxAccelerationOrMaxVelocityAtMaxJerk,
    };
  } else {
    return {
      duration: multiAxisDurationToReachDistanceAtMaxJerk,
      axisIndex: axisIndexToReachDistanceAtMaxJerk,
    };
  }
}

function computeMultiAxisMovementAccelerationDuration(
  multiAxisMovement: IConstrainedMultiAxisMovement,
  distanceRatio: number,
): IDurationWithAxisIndex {
  const length: number = multiAxisMovement.length;

  // duration to reach distance maxAcceleration
  let multiAxisDurationToReachDistanceAtMaxAcceleration: number = 0;
  let axisIndexToReachDistanceAtMaxAcceleration: number = -1;

  // duration to reach maxVelocity at maxAcceleration
  let multiAxisDurationToReachMaxVelocityAtMaxAcceleration: number = Number.POSITIVE_INFINITY;
  let axisIndexToReachMaxVelocityAtMaxAcceleration: number = -1;

  for (let i = 0; i < length; i++) {
    const {
      maxAcceleration,
      maxVelocity,
      distance,
    } = multiAxisMovement[i];

    const singleAxisDurationToReachDistanceAtMaxAcceleration: number = Math.sqrt((distance * distanceRatio * 2) / maxAcceleration);

    if (singleAxisDurationToReachDistanceAtMaxAcceleration > multiAxisDurationToReachDistanceAtMaxAcceleration) {
      axisIndexToReachDistanceAtMaxAcceleration = i;
      multiAxisDurationToReachDistanceAtMaxAcceleration = singleAxisDurationToReachDistanceAtMaxAcceleration;
    }

    const singleAxisDurationToReachMaxVelocityAtMaxAcceleration: number = maxVelocity / maxAcceleration;

    if (singleAxisDurationToReachMaxVelocityAtMaxAcceleration < multiAxisDurationToReachMaxVelocityAtMaxAcceleration) {
      axisIndexToReachMaxVelocityAtMaxAcceleration = i;
      multiAxisDurationToReachMaxVelocityAtMaxAcceleration = singleAxisDurationToReachMaxVelocityAtMaxAcceleration;
    }
  }

  if (multiAxisDurationToReachMaxVelocityAtMaxAcceleration < multiAxisDurationToReachDistanceAtMaxAcceleration) { // reaches maxVelocity first
    return {
      duration: multiAxisDurationToReachMaxVelocityAtMaxAcceleration,
      axisIndex: axisIndexToReachMaxVelocityAtMaxAcceleration,
    };
  } else {
    return {
      duration: multiAxisDurationToReachDistanceAtMaxAcceleration,
      axisIndex: axisIndexToReachDistanceAtMaxAcceleration,
    };
  }
}

/**
 * Assumes maxAcceleration or maxVelocity reached
 */
function computeMultiAxisMovementAccelerationDurationWithInitialAccelerationAndVelocity(
  multiAxisMovement: IConstrainedMultiAxisMovement,
  distanceRatio: number,
  initialAccelerationNormalized: number,
  initialVelocityNormalized: number,
): IDurationWithAxisIndex {
  const length: number = multiAxisMovement.length;

  // duration to reach distance
  let multiAxisDurationToReachDistance: number = 0;
  let axisIndexToReachDistance: number = -1;

  // duration to reach maxVelocity
  let multiAxisDurationToReachMaxVelocity: number = Number.POSITIVE_INFINITY;
  let axisIndexToReachMaxVelocity: number = -1;

  for (let i = 0; i < length; i++) {
    const {
      maxVelocity,
      distance,
    } = multiAxisMovement[i];

    const initialAcceleration: number = initialAccelerationNormalized * distance;
    const initialVelocity: number = initialVelocityNormalized * distance;

    const singleAxisDurationToReachDistance: number = (Math.sqrt((initialVelocity ** 2) + (2 * initialAcceleration * distance * distanceRatio)) - initialVelocity)
      / initialAcceleration;

    if (singleAxisDurationToReachDistance > multiAxisDurationToReachDistance) {
      axisIndexToReachDistance = i;
      multiAxisDurationToReachDistance = singleAxisDurationToReachDistance;
    }

    const singleAxisDurationToReachMaxVelocity: number = (maxVelocity - initialVelocity) / initialAcceleration;

    if (singleAxisDurationToReachMaxVelocity < multiAxisDurationToReachMaxVelocity) {
      axisIndexToReachMaxVelocity = i;
      multiAxisDurationToReachMaxVelocity = singleAxisDurationToReachMaxVelocity;
    }
  }

  if (multiAxisDurationToReachMaxVelocity < multiAxisDurationToReachDistance) { // reaches maxVelocity first
    return {
      duration: multiAxisDurationToReachMaxVelocity,
      axisIndex: axisIndexToReachMaxVelocity,
    };
  } else {
    return {
      duration: multiAxisDurationToReachDistance,
      axisIndex: axisIndexToReachDistance,
    };
  }
}

interface IDecomposeConstraint {
  minimalDuration?: number;
  // minimalDistance?: number;
}

function decomposeConstrainedMultiAxisMovement(
  multiAxisMovement: IConstrainedMultiAxisMovement,
  {
    minimalDuration = 1,
    // minimalDistance = 0,
  }: IDecomposeConstraint = {},
): IMovement[] {

  let distanceRatio: number = 0.5;

  // current values for the movement
  let acceleration: number = 0;
  let velocity: number = 0;

  let jerkMovementA: IMovement | undefined;
  let jerkMovementB: IMovement | undefined;

  let accelerationMovementA: IMovement | undefined;
  let accelerationMovementB: IMovement | undefined;

  let linearMovement: IMovement;

  {
    const { duration, axisIndex } = computeMultiAxisMovementJerkDuration(
      multiAxisMovement,
      distanceRatio,
    );

    if (duration >= minimalDuration) {
      const {
        maxJerk,
        distance,
      } = multiAxisMovement[axisIndex];

      const jerkDistance: number = ((maxJerk * (duration ** 3)) / 6);
      // console.log('jerkDistance', jerkDistance);

      if (jerkDistance > 0) {
        const initialJerkNormalized: number = maxJerk / jerkDistance;
        // console.log('initialJerkNormalized', initialJerkNormalized);
        // console.log('duration', duration);

        const terminalAccelerationNormalized: number = (initialJerkNormalized * duration);
        const terminalVelocityNormalized: number = (initialJerkNormalized * (duration ** 2)) / 2;

        const jerkDistanceRatio: number = jerkDistance / distance; // percent of movement done
        const distances: number[] = multiAxisMovement.map(({ distance }: IConstrainedSingleAxisMovement): number => {
          return distance * jerkDistanceRatio;
        });

        jerkMovementA = {
          initialJerkNormalized: initialJerkNormalized,
          initialAccelerationNormalized: 0,
          initialVelocityNormalized: 0,
          distances,
        };

        jerkMovementB = {
          initialJerkNormalized: initialJerkNormalized,
          initialAccelerationNormalized: -terminalAccelerationNormalized,
          initialVelocityNormalized: terminalVelocityNormalized,
          distances,
        };

        logMovementDetails(jerkMovementA);
        // logMovementDetails(jerkMovementB);

        acceleration = terminalAccelerationNormalized * jerkDistanceRatio;
        velocity = terminalVelocityNormalized * jerkDistanceRatio;

        distanceRatio -= jerkDistanceRatio;
      }
    }
  }

  if (jerkMovementA === void 0) {
    console.log('no jerk');
    const { duration, axisIndex } = computeMultiAxisMovementAccelerationDuration(
      multiAxisMovement,
      distanceRatio,
    );

    // console.log('duration', duration, axisIndex);

    if (duration >= minimalDuration) {
      const {
        distance,
        maxAcceleration,
      } = multiAxisMovement[axisIndex];

      const initialAcceleration: number = (acceleration * distance);

      const accelerationDistance: number = (maxAcceleration * (duration ** 2)) / 2;
      // console.log('accelerationDistance', accelerationDistance);

      if (accelerationDistance > 0) {
        const initialVelocityNormalized: number = initialVelocity / accelerationDistance;
        // console.log('duration', duration);

        const terminalAccelerationNormalized: number = (maxAcceleration * duration) + initialVelocityNormalized;
        const terminalVelocityNormalized: number = (initialAccelerationNormalized * duration) + initialVelocityNormalized;

        const accelerationDistanceRatio: number = accelerationDistance / distance; // percent of movement done
        const distances: number[] = multiAxisMovement.map(({ distance }: IConstrainedSingleAxisMovement): number => {
          return distance * accelerationDistanceRatio;
        });

        accelerationMovementA = {
          initialJerkNormalized: 0,
          initialAccelerationNormalized: 0,
          initialVelocityNormalized: 0,
          distances,
        };

        accelerationMovementB = {
          initialJerkNormalized: 0,
          initialAccelerationNormalized: -initialAccelerationNormalized,
          initialVelocityNormalized: terminalVelocityNormalized,
          distances,
        };

        // logMovementDetails(accelerationMovementA);
        // logMovementDetails(accelerationMovementB);

        velocity = terminalVelocityNormalized * accelerationDistanceRatio;

        distanceRatio -= accelerationDistanceRatio;
      }
    }

  } else {
    // console.log('distanceRatio', distanceRatio);
    // console.log('acceleration', acceleration, 'velocity', velocity);

    const { duration, axisIndex } = computeMultiAxisMovementAccelerationDurationWithInitialAccelerationAndVelocity(
        multiAxisMovement,
        distanceRatio,
        acceleration,
        velocity,
      );

    // console.log('duration', duration, axisIndex);

    if (duration >= minimalDuration) {
      const {
        distance,
      } = multiAxisMovement[axisIndex];

      const initialAcceleration: number = (acceleration * distance);
      const initialVelocity: number = (velocity * distance);

      const accelerationDistance: number = ((initialAcceleration * (duration ** 2)) / 2) + (initialVelocity * duration);
      // console.log('accelerationDistance', accelerationDistance);

      if (accelerationDistance > 0) {
        const initialAccelerationNormalized: number = initialAcceleration / accelerationDistance;
        const initialVelocityNormalized: number = initialVelocity / accelerationDistance;
        // console.log('duration', duration);

        const terminalVelocityNormalized: number = (initialAccelerationNormalized * duration) + initialVelocityNormalized;

        const accelerationDistanceRatio: number = accelerationDistance / distance; // percent of movement done
        const distances: number[] = multiAxisMovement.map(({ distance }: IConstrainedSingleAxisMovement): number => {
          return distance * accelerationDistanceRatio;
        });

        accelerationMovementA = {
          initialJerkNormalized: 0,
          initialAccelerationNormalized: initialAccelerationNormalized,
          initialVelocityNormalized: initialVelocityNormalized,
          distances,
        };

        accelerationMovementB = {
          initialJerkNormalized: 0,
          initialAccelerationNormalized: -initialAccelerationNormalized,
          initialVelocityNormalized: terminalVelocityNormalized,
          distances,
        };

        // logMovementDetails(accelerationMovementA);
        // logMovementDetails(accelerationMovementB);

        velocity = terminalVelocityNormalized * accelerationDistanceRatio;

        distanceRatio -= accelerationDistanceRatio;
      }
    }
  }

  {
    const linearDistanceRatio: number = distanceRatio * 2; // percent of movement done
    const distances: number[] = multiAxisMovement.map(({ distance }: IConstrainedSingleAxisMovement): number => {
      return distance * linearDistanceRatio;
    });

    linearMovement = {
      initialJerkNormalized: 0,
      initialAccelerationNormalized: 0,
      initialVelocityNormalized: velocity,
      distances,
    };

    // logMovementDetails(linearMovement);
  }

  return [];

}


// function decomposeConstrainedMultiAxisMovement(
//   multiAxisMovement: IConstrainedMultiAxisMovement,
//   {
//     minimalDuration = 0,
//     minimalDistance = 0,
//   }: IDecomposeConstraint = {},
// ): IMovement[] {
//   const length: number = multiAxisMovement.length;
//
//   // distance ratio to reach maxAcceleration at maxJerk
//   let multiAxisDistanceRatioToReachMaxAccelerationAtMaxJerk: number = 0.5;
//   let limitingMovementIndex: number = -1;
//
//   for (let i = 0; i < length; i++) {
//     const  {
//       maxJerk,
//       maxAcceleration,
//     } = multiAxisMovement[i];
//
//     const singleAxisDurationToReachMaxAccelerationAtMaxJerk: number = maxAcceleration / maxJerk;
//     console.log(singleAxisDurationToReachMaxAccelerationAtMaxJerk);
//     const singleAxisDistanceRatioToReachMaxAccelerationAtMaxJerk: number =
//       (maxAcceleration * maxAcceleration * maxAcceleration) / (6 * maxJerk * maxJerk);
//
//     if (singleAxisDistanceRatioToReachMaxAccelerationAtMaxJerk < multiAxisDistanceRatioToReachMaxAccelerationAtMaxJerk) {
//       limitingMovementIndex = i;
//       multiAxisDistanceRatioToReachMaxAccelerationAtMaxJerk = singleAxisDistanceRatioToReachMaxAccelerationAtMaxJerk;
//     }
//   }
//
//   const  {
//     maxJerk,
//     maxAcceleration,
//     distance,
//   } = multiAxisMovement[limitingMovementIndex];
//
//   const initialJerk: number = maxJerk * multiAxisDistanceRatioToReachMaxAccelerationAtMaxJerk;
//   // const duration: number = maxAcceleration / maxJerk;
//   console.log(distance);
//   const duration: number = Math.pow((6 * distance * multiAxisDistanceRatioToReachMaxAccelerationAtMaxJerk) / maxJerk, 1 / 3);
//
//   // movement[0] = { initialJerk, initialAcceleration: 0, initialVelocity: 0, distances: distances * multiAxisDistanceRatioToReachMaxAccelerationAtMaxJerk }
//   console.log(initialJerk, multiAxisDistanceRatioToReachMaxAccelerationAtMaxJerk);
//   console.log(duration);
//
//   /**
//    * TODO continue here
//    */
//     // distance ratio to reach maxVelocity at maxAcceleration
//   let multiAxisDistanceRatioToReachMaxVelocityAtMaxAcceleration: number = 0.5;
//
//   for (let i = 0; i < length; i++) {
//     const  {
//       maxJerk,
//       maxAcceleration,
//     } = multiAxisMovement[i];
//
//     // const a1: number =
//
//
//     // const singleAxisDistanceRatioToReachMaxVelocityAtMaxAcceleration: number =
//     //   (maxAcceleration * maxAcceleration * maxAcceleration) / (6 * maxJerk * maxJerk);
//     //
//     // multiAxisDistanceRatioToReachMaxVelocityAtMaxAcceleration = Math.min(
//     //   multiAxisDistanceRatioToReachMaxVelocityAtMaxAcceleration,
//     //   singleAxisDistanceRatioToReachMaxVelocityAtMaxAcceleration,
//     // );
//   }
//
//
//   // // time and distance to reach maxAcceleration at maxJerk
//   // const t1: number = maxAcceleration / maxJerk;
//   // const d1: number = (maxJerk * t1 * t1 * t1) / 6;
//   //
//   // console.log(t1, d1);
//   //
//   // // time to reach maxVelocity at maxAcceleration
//   // const t2: number = maxVelocity / maxAcceleration;
//
//   return [];
//
// }

// function decomposeConstrainedMultiAxisMovement(
//   multiAxisMovement: IConstrainedMultiAxisMovement,
// ): IMovement[] {
//   const length: number = multiAxisMovement.length;
//
//   // time and distance to reach maxAcceleration at maxJerk
//   let multiAxisDurationToReachMaxAccelerationAtMaxJerk: number = 0;
//   let multiAxisDistanceRatioToReachMaxAccelerationAtMaxJerk: number = 1;
//
//   for (let i = 0; i < length; i++) {
//     const  {
//       maxJerk,
//       maxAcceleration,
//     } = multiAxisMovement[i];
//
//     const singleAxisDurationToReachMaxAccelerationAtMaxJerk: number = maxAcceleration / maxJerk;
//
//     multiAxisDurationToReachMaxAccelerationAtMaxJerk = Math.max(
//       multiAxisDurationToReachMaxAccelerationAtMaxJerk,
//       singleAxisDurationToReachMaxAccelerationAtMaxJerk,
//     );
//
//     const singleAxisDistanceRatioToReachMaxAccelerationAtMaxJerk: number = (maxJerk * singleAxisDurationToReachMaxAccelerationAtMaxJerk * singleAxisDurationToReachMaxAccelerationAtMaxJerk * singleAxisDurationToReachMaxAccelerationAtMaxJerk) / 6;
//   }
//
//   console.log(multiAxisDurationToReachMaxAccelerationAtMaxJerk);
//
//   // // time and distance to reach maxAcceleration at maxJerk
//   // const t1: number = maxAcceleration / maxJerk;
//   // const d1: number = (maxJerk * t1 * t1 * t1) / 6;
//   //
//   // console.log(t1, d1);
//   //
//   // // time to reach maxVelocity at maxAcceleration
//   // const t2: number = maxVelocity / maxAcceleration;
//
//   return [];
//
// }

/*-----------------*/


export function debugMovement() {
  const axeAConstraint: IMovementConstraint = {
    maxVelocity: 10,
    // maxAcceleration: 1e3,
    maxAcceleration: 2,
    maxJerk: 100000,
  };

  const axeBConstraint: IMovementConstraint = {
    maxVelocity: 10,
    maxAcceleration: 1,
    maxJerk: 10,
  };

  // (10, 0)
  const movementA: IConstrainedMultiAxisMovement = [
    {
      distance: 100,
      // distance: 2,
      ...axeAConstraint,
    },
    // {
    //   distance: 0,
    //   ...axeBConstraint,
    // }
  ];

  // (10, 10)
  // const movementB: IConstrainedMultiAxisMovement = [
  //   {
  //     distance: 10,
  //     initialVelocity: 0,
  //     ...axeAConstraint,
  //   },
  //   {
  //     distance: 10,
  //     initialVelocity: 0,
  //     ...axeBConstraint,
  //   }
  // ];

  // right angle movement (pure X, the  pure Y)
  // const movementA: IMultiAxisMovement = [
  //   {
  //     distance: 10,
  //     initialVelocity: 0,
  //     ...axeAConstraint,
  //   },
  //   {
  //     distance: 0,
  //     initialVelocity: 0,
  //     ...axeBConstraint,
  //   }
  // ];
  //
  // const movementB: IMultiAxisMovement = [
  //   {
  //     distance: 0,
  //     initialVelocity: 0,
  //     ...axeAConstraint,
  //   },
  //   {
  //     distance: 10,
  //     initialVelocity: 0,
  //     ...axeBConstraint,
  //   }
  // ];

  // const movementA: IMultiAxisMovement = [
  //   {
  //     distance: 10,
  //     initialVelocity: 0,
  //     ...axeAConstraint,
  //   },
  //   {
  //     distance: -10,
  //     initialVelocity: 0,
  //     ...axeBConstraint,
  //   }
  // ];
  //
  // const movementB: IMultiAxisMovement = [
  //   {
  //     distance: 10,
  //     initialVelocity: 0,
  //     ...axeAConstraint,
  //   },
  //   {
  //     distance: 10,
  //     initialVelocity: 0,
  //     ...axeBConstraint,
  //   }
  // ];

  decomposeConstrainedMultiAxisMovement(
    movementA,
  );
}

