@use "sass:math";

@import './components/loaders/dual-ring-loader/dual-ring-loader-mixin';

$icon-vertical-offset: 5%;

@mixin background-image-mixin($path, $position: center center, $size: contain) {
  background-image: url(#{$path});
  background-repeat: no-repeat;
  background-position: $position;
  background-size: $size;
}


@mixin square-icon-mixin($icon-size-inner, $icon-size-outer-x: $icon-size-inner,  $icon-size-outer-y: $icon-size-outer-x) {
  display: inline-block;
  cursor: inherit;
  user-select: none;
  position: relative;
  width: $icon-size-outer-x;
  height: $icon-size-outer-y;

  &::before {
    position: absolute;
    //left: ($icon-size-outer-x - $icon-size-inner) / 2;
    //top: ($icon-size-outer-y - $icon-size-inner) / 2;
    text-align: center;
    left: 50%;
    top: 50% + $icon-vertical-offset;
    margin-left: -($icon-size-inner * 0.5);
    margin-top: -($icon-size-inner * 0.5);
    width: $icon-size-inner;
    height: $icon-size-inner;
    font-size: $icon-size-inner;
    line-height: $icon-size-inner;
  }
}

@mixin dynamic-icon-mixin($color, $color-hover, $transition-duration: 250ms) {
  cursor: pointer;
  color: $color;
  transition: color $transition-duration;

  &:hover {
    color: $color-hover;
  }
}

@mixin aspect-ratio-mixin($width, $height) {
  $ratio: '#{$width} / #{$height}';

  // https://codepen.io/una/pen/BazyaOM
  // https://css-tricks.com/aspect-ratio-boxes/

  aspect-ratio: #{$ratio};

  @supports not (aspect-ratio: #{$ratio}) {
    &::before {
      float: left;
      padding-top: math.div($width, $height) * 100%;
      content: '';
    }

    &::after {
      display: block;
      content: '';
      clear: both;
    }
  }
}

@mixin scrollbar-mixin(
  $scroll-width: 4px,
  $scroll-background: #fff,
  $scroll-color: #5a5a5a
) {
  -webkit-overflow-scrolling: auto;

  &::-webkit-scrollbar {
    width: $scroll-width;
    height: $scroll-width;
  }

  &::-webkit-scrollbar-track {
    background: $scroll-background;
  }

  &::-webkit-scrollbar-thumb {
    background: $scroll-color;
    width: $scroll-width;
    height: $scroll-width;
  }
}



/** CSS VARIABLE **/

@function create-var($name, $value) {
  @return (
    name: $name,
    value: $value,
  );
}

@function get-var-name($variable) {
  @return map-get($variable, 'name');
}

@function get-var-value($variable) {
  @return map-get($variable, 'value');
}



@mixin create-css-var($variable) {
  --#{get-var-name($variable)}: #{get-var-value($variable)};
}

@function get-css-var($variable) {
  @return var(--#{get-var-name($variable)}, get-var-value($variable));
}


